import openai
import json
import re
from config import Config

class StoryGenerator:
    def __init__(self):
        openai.api_key = Config.OPENAI_API_KEY
        self.system_prompts = {
            'en': """You are "CityChai", a friendly Indian local guide. Generate 3 numbered recommendations for {city} matching {mood} mood. Each recommendation should be:
- One place name
- One sentence cultural story/fact
- Under 50 words each
- Format: "1. [Place] - [Story]"
End with "Reply 1/2/3 for more üìú" """,
            
            'hi': """‡§Ü‡§™ "CityChai" ‡§π‡•à‡§Ç, ‡§è‡§ï ‡§Æ‡§ø‡§§‡•ç‡§∞‡§µ‡§§ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ó‡§æ‡§á‡§°‡•§ {city} ‡§ï‡•á ‡§≤‡§ø‡§è {mood} ‡§Æ‡•Ç‡§° ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ 3 ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§¨‡§¶‡•ç‡§ß ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç‡•§ ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§Æ‡•á‡§Ç ‡§π‡•ã:
- ‡§è‡§ï ‡§∏‡•ç‡§•‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ
- ‡§è‡§ï ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡§π‡§æ‡§®‡•Ä/‡§§‡§•‡•ç‡§Ø
- 50 ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ
- ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™: "1. [‡§∏‡•ç‡§•‡§æ‡§®] - [‡§ï‡§π‡§æ‡§®‡•Ä]"
‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç "Reply 1/2/3 for more üìú" ‡§≤‡§ø‡§ñ‡•á‡§Ç""",
            
            'bn': """‡¶Ü‡¶™‡¶®‡¶ø "CityChai", ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ó‡¶æ‡¶á‡¶°‡•§ {city} ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø {mood} ‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ 3‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶¶‡¶ø‡¶®‡•§ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá:
- ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
- ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø ‡¶∏‡¶æ‡¶Ç‡¶∏‡ßç‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶ó‡¶≤‡ßç‡¶™/‡¶§‡¶•‡ßç‡¶Ø
- 50 ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶ï‡¶Æ
- ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü: "1. [‡¶∏‡ßç‡¶•‡¶æ‡¶®] - [‡¶ó‡¶≤‡ßç‡¶™]"
‡¶∂‡ßá‡¶∑‡ßá "Reply 1/2/3 for more üìú" ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"""
        }
    
    def generate_recommendations(self, city, mood, language='en'):
        """Generate 3 story-driven recommendations"""
        try:
            system_prompt = self.system_prompts.get(language, self.system_prompts['en'])
            formatted_prompt = system_prompt.format(city=city, mood=mood)
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": formatted_prompt},
                    {"role": "user", "content": f"Suggest places in {city} for {mood} mood"}
                ],
                max_tokens=300,
                temperature=0.7
            )
            
            content = response.choices[0].message.content.strip()
            return self.parse_recommendations(content)
            
        except Exception as e:
            print(f"Error generating recommendations: {e}")
            return self.get_fallback_recommendations(city, mood, language)
    
    def parse_recommendations(self, content):
        """Parse LLM response into structured recommendations"""
        lines = content.split('\n')
        recommendations = []
        
        for line in lines:
            line = line.strip()
            # Match numbered recommendations
            match = re.match(r'(\d+)\.\s*(.+?)\s*[-‚Äì]\s*(.+)', line)
            if match:
                number, place, story = match.groups()
                recommendations.append({
                    'number': int(number),
                    'place': place.strip(),
                    'story': story.strip(),
                    'full_text': line
                })
        
        return recommendations[:3]
    
    def generate_detailed_story(self, recommendation, language='en'):
        """Generate detailed story for selected recommendation"""
        try:
            prompts = {
                'en': f"Tell a detailed story about {recommendation['place']} in 3-4 sentences. Include history, legends, and tips. Keep under 200 words.",
                'hi': f"{recommendation['place']} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç 3-4 ‡§µ‡§æ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§ï‡§π‡§æ‡§®‡•Ä ‡§¨‡§§‡§æ‡§è‡§Ç‡•§ ‡§á‡§§‡§ø‡§π‡§æ‡§∏, ‡§ï‡§ø‡§Ç‡§µ‡§¶‡§Ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§î‡§∞ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§ 200 ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§∏‡•á ‡§ï‡§Æ ‡§∞‡§ñ‡•á‡§Ç‡•§",
                'bn': f"{recommendation['place']} ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá 3-4 ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá ‡¶¨‡¶ø‡¶∏‡•ç‡§§‡•É‡¶§ ‡¶ó‡¶≤‡ßç‡¶™ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏, ‡¶ï‡¶ø‡¶Ç‡¶¨‡¶¶‡¶®‡ßç‡¶§‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ 200 ‡¶∂‡¶¨‡ßç‡¶¶‡ßá‡¶∞ ‡¶ï‡¶Æ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®‡•§"
            }
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "user", "content": prompts.get(language, prompts['en'])}
                ],
                max_tokens=250,
                temperature=0.8
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            print(f"Error generating detailed story: {e}")
            return self.get_fallback_detailed_story(recommendation, language)
    
    def get_fallback_recommendations(self, city, mood, language='en'):
        """Fallback recommendations when API fails"""
        fallback_data = {
            'Delhi': [
                {'number': 1, 'place': 'Red Fort', 'story': 'Mughal emperors ruled from these red sandstone walls', 'full_text': '1. Red Fort - Mughal emperors ruled from these red sandstone walls'},
                {'number': 2, 'place': 'India Gate', 'story': 'Memorial arch honoring 70,000 Indian soldiers', 'full_text': '2. India Gate - Memorial arch honoring 70,000 Indian soldiers'},
                {'number': 3, 'place': 'Lotus Temple', 'story': 'Bahai house of worship shaped like a blooming lotus', 'full_text': '3. Lotus Temple - Bahai house of worship shaped like a blooming lotus'}
            ]
        }
        
        return fallback_data.get(city, fallback_data['Delhi'])
    
    def get_fallback_detailed_story(self, recommendation, language='en'):
        """Fallback detailed story when API fails"""
        stories = {
            'en': f"The {recommendation['place']} is a magnificent destination with rich history and cultural significance. Visitors often describe it as a place where past and present beautifully blend together. It's definitely worth exploring!",
            'hi': f"{recommendation['place']} ‡§è‡§ï ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§ó‡§Ç‡§§‡§µ‡•ç‡§Ø ‡§π‡•à ‡§ú‡•ã ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§î‡§∞ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ ‡§∏‡•á ‡§≠‡§∞‡§æ ‡§π‡•à‡•§ ‡§Ø‡§π ‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§¶‡•á‡§ñ‡§®‡•á ‡§≤‡§æ‡§Ø‡§ï ‡§π‡•à!",
            'bn': f"{recommendation['place']} ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶ó‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø ‡¶Ø‡¶æ ‡¶∏‡¶Æ‡ßÉ‡¶¶‡ßç‡¶ß ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶Ç‡¶∏‡ßç‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶§‡¶æ‡ßé‡¶™‡¶∞‡ßç‡¶Ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶≠‡¶∞‡¶™‡ßÅ‡¶∞‡•§ ‡¶è‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶Æ‡¶§‡ßã!"
        }
        
        return stories.get(language, stories['en'])
