import openai
import json
import re
from config import Config

class StoryGenerator:
    def __init__(self):
        openai.api_key = Config.OPENAI_API_KEY
        self.system_prompts = {
            'en': """You are "CityChai", a friendly Indian local who replies on WhatsApp.
Always:
‚Ä¢ speak in English
‚Ä¢ keep responses ‚â§160 characters
‚Ä¢ weave a 1-sentence cultural story for each place
‚Ä¢ match mood: {mood} (curious/adventurous/relaxed/cultural)
‚Ä¢ end with: "Reply 1/2/3 for more üìú"

User context:
City: {city}
Mood: {mood}
========================================================
Task:
1. Return exactly 3 numbered recommendations.
2. Each line: "{number}. {Place} ‚Äì {1-sentence story}"
3. No extra text before or after the list.""",
            
            'hi': """‡§Ü‡§™ "CityChai" ‡§π‡•à‡§Ç, ‡§è‡§ï ‡§Æ‡§ø‡§§‡•ç‡§∞‡§µ‡§§ ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ú‡•ã WhatsApp ‡§™‡§∞ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§§‡•á ‡§π‡•à‡§Ç‡•§
‡§π‡§Æ‡•á‡§∂‡§æ:
‚Ä¢ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡•ã‡§≤‡•á‡§Ç
‚Ä¢ ‡§ú‡§µ‡§æ‡§¨ ‚â§160 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•á‡§Ç
‚Ä¢ ‡§π‡§∞ ‡§ú‡§ó‡§π ‡§ï‡•á ‡§≤‡§ø‡§è 1-‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§ï‡•Ä ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§ï‡§π‡§æ‡§®‡•Ä ‡§¨‡•Å‡§®‡•á‡§Ç
‚Ä¢ ‡§Æ‡•Ç‡§° ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞: {mood} (curious/adventurous/relaxed/cultural)
‚Ä¢ ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç: "Reply 1/2/3 for more üìú"

‡§Ø‡•Ç‡§ú‡§∞ ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠:
‡§∂‡§π‡§∞: {city}
‡§Æ‡•Ç‡§°: {mood}
========================================================
‡§ï‡§æ‡§∞‡•ç‡§Ø:
1. ‡§†‡•Ä‡§ï 3 ‡§∏‡§Ç‡§ñ‡•ç‡§Ø‡§æ‡§¨‡§¶‡•ç‡§ß ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§¶‡•á‡§Ç‡•§
2. ‡§π‡§∞ ‡§≤‡§æ‡§á‡§®: "{number}. {Place} ‚Äì {1-sentence story}"
3. ‡§∏‡•Ç‡§ö‡•Ä ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ø‡§æ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç‡•§""",
            
            'bn': """‡¶Ü‡¶™‡¶®‡¶ø "CityChai", ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡ßç‡¶Ø‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶≠‡¶æ‡¶∞‡¶§‡ßÄ‡¶Ø‡¶º ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶Ø‡¶ø‡¶®‡¶ø WhatsApp ‡¶è ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶®‡•§
‡¶∏‡¶∞‡ßç‡¶¨‡¶¶‡¶æ:
‚Ä¢ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßÅ‡¶®
‚Ä¢ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‚â§160 ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®
‚Ä¢ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø 1-‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø ‡¶∏‡¶æ‡¶Ç‡¶∏‡ßç‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶ó‡¶≤‡ßç‡¶™ ‡¶¨‡ßÅ‡¶®‡ßÅ‡¶®
‚Ä¢ ‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ: {mood} (curious/adventurous/relaxed/cultural)
‚Ä¢ ‡¶∂‡ßá‡¶∑‡ßá: "Reply 1/2/3 for more üìú"

‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶™‡ßç‡¶∞‡¶∏‡¶ô‡ßç‡¶ó:
‡¶∂‡¶π‡¶∞: {city}
‡¶Æ‡ßá‡¶ú‡¶æ‡¶ú: {mood}
========================================================
‡¶ï‡¶æ‡¶ú:
1. ‡¶†‡¶ø‡¶ï 3‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶∏‡ßÅ‡¶™‡¶æ‡¶∞‡¶ø‡¶∂ ‡¶¶‡¶ø‡¶®‡•§
2. ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶≤‡¶æ‡¶á‡¶®: "{number}. {Place} ‚Äì {1-sentence story}"
3. ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶¨‡¶æ ‡¶™‡¶∞‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶®‡ßá‡¶á‡•§"""
        }
    
    def generate_recommendations(self, city, mood, language='en'):
        """Generate 3 story-driven recommendations"""
        try:
            system_prompt = self.system_prompts.get(language, self.system_prompts['en'])
            formatted_prompt = system_prompt.format(city=city, mood=mood)
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": formatted_prompt},
                    {"role": "user", "content": f"Tell me about places to visit in {city} that match my {mood} mood"}
                ],
                max_tokens=200,
                temperature=0.7
            )
            
            content = response.choices[0].message.content.strip()
            return self.parse_recommendations(content)
            
        except Exception as e:
            print(f"Error generating recommendations: {e}")
            return self.get_fallback_recommendations(city, mood, language)
    
    def parse_recommendations(self, content):
        """Parse LLM response into structured recommendations"""
        lines = content.split('\n')
        recommendations = []
        
        for line in lines:
            line = line.strip()
            # Match numbered recommendations
            match = re.match(r'(\d+)\.\s*(.+?)\s*‚Äì\s*(.+)', line)
            if match:
                number, place, story = match.groups()
                recommendations.append({
                    'number': int(number),
                    'place': place.strip(),
                    'story': story.strip(),
                    'full_text': line
                })
        
        return recommendations[:3]  # Ensure only 3 recommendations
    
    def generate_detailed_story(self, recommendation, language='en'):
        """Generate detailed story for selected recommendation"""
        try:
            prompts = {
                'en': f"Tell a detailed, engaging story about {recommendation['place']} in 2-3 sentences. Include historical facts, local legends, and what makes it special. Keep it under 300 characters.",
                'hi': f"{recommendation['place']} ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç 2-3 ‡§µ‡§æ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§è‡§ï ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§, ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§ï‡§π‡§æ‡§®‡•Ä ‡§¨‡§§‡§æ‡§è‡§Ç‡•§ ‡§ê‡§§‡§ø‡§π‡§æ‡§∏‡§ø‡§ï ‡§§‡§•‡•ç‡§Ø, ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø ‡§ï‡§ø‡§Ç‡§µ‡§¶‡§Ç‡§§‡§ø‡§Ø‡§æ‡§Ç ‡§î‡§∞ ‡§á‡§∏‡§ï‡•Ä ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§ 300 ‡§Ö‡§ï‡•ç‡§∑‡§∞‡•ã‡§Ç ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§∞‡§ñ‡•á‡§Ç‡•§",
                'bn': f"{recommendation['place']} ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá 2-3 ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡ßÉ‡¶§, ‡¶Ü‡¶ï‡¶∞‡ßç‡¶∑‡¶£‡ßÄ‡¶Ø‡¶º ‡¶ó‡¶≤‡ßç‡¶™ ‡¶¨‡¶≤‡ßÅ‡¶®‡•§ ‡¶ê‡¶§‡¶ø‡¶π‡¶æ‡¶∏‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø, ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡¶ø‡¶Ç‡¶¨‡¶¶‡¶®‡ßç‡¶§‡¶ø ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ü‡¶ø ‡¶ï‡ßÄ ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßá ‡¶§‡ßã‡¶≤‡ßá ‡¶§‡¶æ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ 300 ‡¶Ö‡¶ï‡ßç‡¶∑‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®‡•§"
            }
            
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "user", "content": prompts.get(language, prompts['en'])}
                ],
                max_tokens=150,
                temperature=0.8
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            print(f"Error generating detailed story: {e}")
            return self.get_fallback_detailed_story(recommendation, language)
    
    def get_fallback_recommendations(self, city, mood, language='en'):
        """Fallback recommendations when API fails"""
        fallback_data = {
            'Delhi': {
                'en': [
                    {'number': 1, 'place': 'Red Fort', 'story': 'Mughal emperors ruled from these red sandstone walls', 'full_text': '1. Red Fort ‚Äì Mughal emperors ruled from these red sandstone walls'},
                    {'number': 2, 'place': 'India Gate', 'story': 'Memorial arch honoring 70,000 Indian soldiers', 'full_text': '2. India Gate ‚Äì Memorial arch honoring 70,000 Indian soldiers'},
                    {'number': 3, 'place': 'Lotus Temple', 'story': 'Bahai house of worship shaped like a blooming lotus', 'full_text': '3. Lotus Temple ‚Äì Bahai house of worship shaped like a blooming lotus'}
                ],
                'hi': [
                    {'number': 1, 'place': '‡§≤‡§æ‡§≤ ‡§ï‡§ø‡§≤‡§æ', 'story': '‡§Æ‡•Å‡§ó‡§≤ ‡§¨‡§æ‡§¶‡§∂‡§æ‡§π ‡§Ø‡§π‡§æ‡§Ç ‡§≤‡§æ‡§≤ ‡§™‡§§‡•ç‡§•‡§∞ ‡§ï‡•Ä ‡§¶‡•Ä‡§µ‡§æ‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§∞‡§æ‡§ú ‡§ï‡§∞‡§§‡•á ‡§•‡•á', 'full_text': '1. ‡§≤‡§æ‡§≤ ‡§ï‡§ø‡§≤‡§æ ‚Äì ‡§Æ‡•Å‡§ó‡§≤ ‡§¨‡§æ‡§¶‡§∂‡§æ‡§π ‡§Ø‡§π‡§æ‡§Ç ‡§≤‡§æ‡§≤ ‡§™‡§§‡•ç‡§•‡§∞ ‡§ï‡•Ä ‡§¶‡•Ä‡§µ‡§æ‡§∞‡•ã‡§Ç ‡§∏‡•á ‡§∞‡§æ‡§ú ‡§ï‡§∞‡§§‡•á ‡§•‡•á'},
                    {'number': 2, 'place': '‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ ‡§ó‡•á‡§ü', 'story': '70,000 ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∏‡•à‡§®‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Æ‡§∞‡•ç‡§™‡§ø‡§§ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï', 'full_text': '2. ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ ‡§ó‡•á‡§ü ‚Äì 70,000 ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§∏‡•à‡§®‡§ø‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§∏‡§Æ‡§∞‡•ç‡§™‡§ø‡§§ ‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï'},
                    {'number': 3, 'place': '‡§≤‡•ã‡§ü‡§∏ ‡§ü‡•á‡§Æ‡•ç‡§™‡§≤', 'story': '‡§ï‡§Æ‡§≤ ‡§ï‡•á ‡§´‡•Ç‡§≤ ‡§ú‡•à‡§∏‡§æ ‡§¨‡§π‡§æ‡§à ‡§â‡§™‡§æ‡§∏‡§®‡§æ ‡§∏‡•ç‡§•‡§≤', 'full_text': '3. ‡§≤‡•ã‡§ü‡§∏ ‡§ü‡•á‡§Æ‡•ç‡§™‡§≤ ‚Äì ‡§ï‡§Æ‡§≤ ‡§ï‡•á ‡§´‡•Ç‡§≤ ‡§ú‡•à‡§∏‡§æ ‡§¨‡§π‡§æ‡§à ‡§â‡§™‡§æ‡§∏‡§®‡§æ ‡§∏‡•ç‡§•‡§≤'}
                ]
            }
        }
        
        return fallback_data.get(city, fallback_data['Delhi']).get(language, fallback_data['Delhi']['en'])
    
    def get_fallback_detailed_story(self, recommendation, language='en'):
        """Fallback detailed story when API fails"""
        fallback_stories = {
            'en': f"The {recommendation['place']} is a magnificent destination with rich history and cultural significance. Visitors often describe it as a place where past and present beautifully blend together.",
            'hi': f"{recommendation['place']} ‡§è‡§ï ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§ó‡§Ç‡§§‡§µ‡•ç‡§Ø ‡§π‡•à ‡§ú‡•ã ‡§∏‡§Æ‡•É‡§¶‡•ç‡§ß ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§î‡§∞ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§Æ‡§π‡§§‡•ç‡§µ ‡§∏‡•á ‡§≠‡§∞‡§æ ‡§π‡•à‡•§ ‡§™‡§∞‡•ç‡§Ø‡§ü‡§ï ‡§Ö‡§ï‡•ç‡§∏‡§∞ ‡§á‡§∏‡•á ‡§è‡§ï ‡§ê‡§∏‡•Ä ‡§ú‡§ó‡§π ‡§¨‡§§‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§π‡§æ‡§Ç ‡§Ö‡§§‡•Ä‡§§ ‡§î‡§∞ ‡§µ‡§∞‡•ç‡§§‡§Æ‡§æ‡§® ‡§ñ‡•Ç‡§¨‡§∏‡•Ç‡§∞‡§§‡•Ä ‡§∏‡•á ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§",
            'bn': f"{recommendation['place']} ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¶‡ßÅ‡¶∞‡ßç‡¶¶‡¶æ‡¶®‡ßç‡¶§ ‡¶ó‡¶®‡ßç‡¶§‡¶¨‡ßç‡¶Ø ‡¶Ø‡¶æ ‡¶∏‡¶Æ‡ßÉ‡¶¶‡ßç‡¶ß ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶æ‡¶Ç‡¶∏‡ßç‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶§‡¶æ‡ßé‡¶™‡¶∞‡ßç‡¶Ø ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶≠‡¶∞‡¶™‡ßÅ‡¶∞‡•§ ‡¶¶‡¶∞‡ßç‡¶∂‡¶®‡¶æ‡¶∞‡ßç‡¶•‡ßÄ‡¶∞‡¶æ ‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º‡¶∂‡¶á ‡¶è‡¶ü‡¶ø‡¶ï‡ßá ‡¶è‡¶Æ‡¶® ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶•‡¶æ‡¶® ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¨‡¶∞‡ßç‡¶£‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡¶® ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡¶§‡ßÄ‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞‡¶≠‡¶æ‡¶¨‡ßá ‡¶Æ‡¶ø‡¶∂‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º‡•§"
        }
        
        return fallback_stories.get(language, fallback_stories['en'])
